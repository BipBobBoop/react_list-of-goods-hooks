{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","setSortType","reverse","setReverse","visibleGoods","useMemo","goods","preparedGoods","sort","good1","good2","Alphabetically","localeCompare","ByLength","length","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,0BAAAA,E,mBAAAA,M,KAKE,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAM,WACjB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAeC,mBAAQ,kBA3B/B,SACEC,EADF,GAGG,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,QAENK,EAAa,YAAOD,GAiB1B,OAfIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKRZ,EAAUK,EAAcL,UAAYK,EAMRQ,CACjClB,EAAiB,CAAEG,WAAUE,cAC5B,CACDF,EACAE,IAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYlB,IAAaJ,EAASe,iBAEpCQ,QAAS,kBAAMlB,EAAYL,EAASe,iBALtC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYlB,IAAaJ,EAASiB,WAEpCM,QAAS,kBAAMlB,EAAYL,EAASiB,WALtC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAYD,IAL7B,sBAUGF,IAAaE,GACd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA1CU,WAClBlB,EAAY,IACZE,GAAW,IAqCL,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC9GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.52ba1911.chunk.js","sourcesContent":["import { useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum SortType {\n  Alphabetically = 'Alphabet',\n  ByLength = 'Length',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface PreparedGoodsProps {\n  sortType: SortType | string;\n  reverse: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortType, reverse }: PreparedGoodsProps,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n\n        case SortType.ByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return reverse ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App = () => {\n  const [sortType, setSortType] = useState('');\n  const [reverse, setReverse] = useState(false);\n  const visibleGoods = useMemo(() => getPreparedGoods(\n    goodsFromServer, { sortType, reverse },\n  ), [\n    sortType,\n    reverse,\n  ]);\n\n  const handleReset = () => {\n    setSortType('');\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.Alphabetically,\n          })}\n          onClick={() => setSortType(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.ByLength,\n          })}\n          onClick={() => setSortType(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !reverse,\n          })}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(!sortType && !reverse) || (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}